object SyntaxManager: TSyntaxManager
  Left = 232
  Top = 280
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
      end
      item
        DisplayName = 'Function background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16774389
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block bound'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'OP Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 
          '#all chars after '#39' or ; to end of line'#13#10'#all chars after rem plu' +
          's whitespace to end of line'#13#10#39'.*|'#13#10';.*|'#13#10'rem\s.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        Expression = 
          '# ^    search from begin of line '#13#10'# \s*  allow leading spaces  ' +
          '(don'#39't work)'#13#10'# \S+: 1-n chars followed by :'#13#10'^\s*\S+:'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end\b'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[\#,_,a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'BIN'
        StyleName = 'Number'
        TokenType = 7
        Expression = 
          '#binary can be written '#13#10'# 0b01010101'#13#10'# b'#39'01010101'#39'  or'#13#10'0b[0-1' +
          ']+ |'#13#10'#b'#39'[01]+'#13#10'b'#39'[01]('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = 
          '#HEX can be written '#13#10'# 0xF9A0'#13#10'# h'#39'F9A0'#39'  or'#13#10'0x[\da-f]+ |'#13#10'h\'#39 +
          '[\da-f]\'#39'+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag block rule 1'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ''
              '#bootloader'
              '#chip'
              '#config'
              '#define'
              '#endif'
              '#endscript'
              '#if'
              '#ifdef'
              '#ifndef'
              '#include'
              '#mem'
              '#option'
              '#script'
              '#startup'
              '10ms'
              '10us'
              'ABS'
              'ADOff'
              'Alias'
              'AND'
              'As'
              'Asc'
              'At'
              'Average'
              'BcdToDec_GCB'
              'BIT'
              'Bootloader'
              'Box'
              'Byte'
              'ByteToBin'
              'Call'
              'Case'
              'CHR'
              'Circle'
              'ClearTimer'
              'CLS'
              'DecToBcd_GCB'
              'Dim'
              'Dir'
              'DisplayChar'
              'DisplayValue'
              'Do'
              'Else'
              'End'
              'End Table'
              'EPRead'
              'EPWrite'
              'Exit'
              'Exit Sub'
              'FilledBox'
              'FilledCircle'
              'For'
              'Function'
              'Get'
              'GLCDCLS'
              'GLCDDrawChar'
              'GLCDDrawString'
              'GLCDPrint'
              'GLCDReadByte'
              'GLCDTimeDelay'
              'GLCDWriteByte'
              'Gosub'
              'Goto'
              'h'
              'Hex'
              'HI2CMode'
              'HI2CReceive '
              'HI2CReStart'
              'HI2CSend'
              'HI2CSetAddress'
              'HI2CStart'
              'HI2CStartOccurred'
              'HI2CStop'
              'HI2CWaitMSSP'
              'HPWM'
              'HSerPrint'
              'HSerPrintByteCRLF'
              'HSerPrintCRLF'
              'HSerReceive'
              'HSerSend'
              'I2CAckpoll'
              'I2CReceive'
              'I2CReset'
              'i2cRestart'
              'I2CSend'
              'I2CSlaveDeviceReceive'
              'I2CStart'
              'I2CStartOccurred'
              'I2CStop'
              'If'
              'Ignore'
              'In'
              'IndCall'
              'InitGLCD'
              'InitSer'
              'InitTimer0'
              'InitTimer1'
              'INKEY'
              'Instr'
              'Integer'
              'Interrupt'
              'IntOff'
              'IntOn'
              'KeypadData'
              'KeypadRaw'
              'LCase'
              'LCDBacklight'
              'LCDCMD'
              'LCDCreateChar'
              'LCDCreateGraph'
              'LCDCursor'
              'LCDDisplayOff'
              'LCDDisplayOn'
              'LCDHex'
              'LCDHome'
              'LCDSpace'
              'LCDWriteChar'
              'Left'
              'Len'
              'Line'
              'Locate'
              'Log10'
              'Log2'
              'Loge'
              'Loop'
              'Ltrim'
              'm'
              'Mid'
              'ms'
              'Next'
              'NOT'
              'Off'
              'On'
              'On Interrupt'
              'OR'
              'Out'
              'Peek'
              'Poke'
              'Pot'
              'Power'
              'Print'
              'ProgramErase'
              'ProgramRead'
              'ProgramWrite'
              'PS2ReadByte'
              'PS2SetKBLeds'
              'PS2WriteByte'
              'Pset'
              'Pulsein'
              'PulseOut'
              'PulseOutInv'
              'Put'
              'PWMOff'
              'PWMOn'
              'PWMOut'
              'Random'
              'Randomize'
              'ReadAD'
              'ReadAD10'
              'ReadTable'
              'Repeat'
              'Return'
              'Right'
              'Rotate'
              'Rtrim'
              's'
              'Select'
              'SerPrint'
              'SerReceive'
              'SerSend'
              'Set'
              'ShortTone'
              'Simple'
              'SPIMode'
              'SPITransfer'
              'Sqrt'
              'ST7920cTile'
              'ST7920GLCDClearGraphics'
              'ST7920GLCDDisableGraphics'
              'ST7920GLCDEnableGraphics'
              'ST7920GLCDReadByte'
              'ST7920gLocate'
              'ST7920GraphicTest'
              'ST7920gReaddata'
              'ST7920gTile'
              'ST7920lineh'
              'ST7920LineHs'
              'ST7920linev'
              'ST7920Locate'
              'ST7920Tile'
              'ST7920WriteByte'
              'ST7920WriteCommand'
              'ST7920WriteData'
              'StartTimer'
              'Step'
              'StopTimer'
              'Str'
              'Sub'
              'SWAP'
              'SWAP4'
              'Table'
              'Then'
              'To'
              'Tone'
              'UCase'
              'Until'
              'us'
              'Val'
              'Wait'
              'While'
              'Word'
              'WORDTOBIN'
              'XOR')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Function separator'
        BlockName = 'Sub'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub'
        StyleName = 'Function background'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'macro'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'exit')
            CondType = tcNotEqual
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s0 %s-1'
        DynHighlight = dhRange
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Gosub End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'return')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Label'
        StyleName = 'Function background'
        ConditionList = <
          item
            TagList.Strings = (
              '^\s*\S+:')
            CondType = tcStrictMask
          end>
        BlockEnd = 'Gosub End'
        Highlight = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpBound
        DynSelectMin = True
        CollapseFmt = '%sz0'
        SelfClose = True
        NoEndRule = True
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'if'
              'repeat'
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s1 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dim decl'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'dim')
            TokenTypes = 4
            IgnoreCase = True
          end>
        GroupFmt = 'Variables'
        HighlightPos = cpBound
        TreeItemImage = 4
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Do'
        ConditionList = <
          item
            TagList.Strings = (
              'Do')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Loop'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Do'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'For'
        ConditionList = <
          item
            TagList.Strings = (
              'For')
            IgnoreCase = True
          end>
        BlockEnd = 'Next'
        NotCollapsed = True
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Next'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'next')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X '
      '    #define'
      '  Number = 123'
      '  Response.Write "The number is " & number'
      '  For I = 0 To Number'
      '    X = X + h'#39'A012'#39' '
      '    X = X - 0x10101'
      '    X = X + b'#39'01'#39
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Gramma.Gramma = 
      'Skip = <Comment>;'#13#10#13#10'// Used'#13#10'NameDetector = <Identifier> Braket' +
      '? '#39'.'#39';'#13#10#13#10'FuncCall = <Identifier> Braket;'#13#10#13#10'Braket = Braket1 | ' +
      'Braket2;'#13#10#13#10'Braket1 = LeftBraket1 '#39')'#39';'#13#10#13#10'LeftBraket1 = LeftBrak' +
      'et1 <Unknown> |'#13#10'             '#39'('#39';'#13#10'             '#13#10'Braket2 = Lef' +
      'tBraket2 '#39']'#39';'#13#10#13#10'LeftBraket2 = LeftBraket2 <Unknown> |'#13#10'        ' +
      '     '#39'['#39';'
    MarkedBlockStyle = 'Marked block'
    SearchMatchStyle = 'Search Match'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'gcb bas pbs h'
    LexerName = 'GreatCowBasic'
    LineComment = #39
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clWindow
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^<>\|\n]*[\n]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 'rem\s.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 3
        Expression = '^: .*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\S+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Arp'
              'Assoc'
              'At'
              'Atmadm'
              'Attrib'
              'Bootcfg'
              'Break'
              'Cacls'
              'call'
              'cd'
              'Change'
              'Chcp'
              'Chdir'
              'Chkdsk'
              'Chkntfs'
              'choice'
              'Cipher'
              'cls'
              'Cmd'
              'Cmstp'
              'Color'
              'Comp'
              'Compact'
              'Convert'
              'copy'
              'Cprofile'
              'CScript'
              'Date'
              'Defrag'
              'del'
              'Dir'
              'Diskcomp'
              'Diskcopy'
              'DiskPart'
              'do'
              'Doskey'
              'Driverquery'
              'echo'
              'echo.'
              'Endlocal'
              'errorlevel'
              'Eventcreate'
              'Eventquery'
              'Eventtriggers'
              'Evntcmd'
              'exist'
              'Exit'
              'Expand'
              'Fc'
              'Find'
              'Findstr'
              'Finger'
              'Flattemp'
              'for'
              'Format'
              'Fsutil'
              'Ftp'
              'Ftype'
              'Getmac'
              'goto'
              'Gpresult'
              'Gpupdate'
              'Graftabl'
              'Help'
              'Helpctr'
              'Hostname'
              'if'
              'in'
              'Ipconfig'
              'Ipseccmd'
              'Ipxroute'
              'Irftp'
              'Label'
              'Lodctr'
              'Logman'
              'Lpq'
              'Lpr'
              'Macfile'
              'md'
              'Mkdir'
              'Mmc'
              'Mode'
              'More'
              'Mountvol'
              'Move'
              'MS-DOS'
              'Msiexec'
              'Msinfo32'
              'Nbtstat'
              'Net'
              'Netsh'
              'Netstat'
              'not'
              'Nslookup'
              'Ntbackup'
              'Ntcmdprompt'
              'Ntsd'
              'OOpenfiles'
              'Pagefileconfig'
              'Path'
              'Pathping'
              'pause'
              'Pbadmin'
              'Pentnt'
              'Perfmon'
              'Ping'
              'Popd'
              'Print'
              'Prncnfg'
              'Prndrvr'
              'Prnjobs'
              'Prnmngr'
              'Prnport'
              'Prnqctl'
              'Prompt'
              'Pushd'
              'Query'
              'Rcp'
              'Recover'
              'Reg'
              'Regsvr32'
              'Relog'
              'Rem'
              'Rename'
              'Replace'
              'Resetsession'
              'Rexec'
              'Rmdir'
              'Route'
              'RRasdial'
              'Rsh'
              'Rsm'
              'Runas'
              'SC'
              'Schtasks'
              'Secedit'
              'set'
              'Setlocal'
              'Sfc'
              'shift'
              'Shutdown'
              'Sort'
              'Start'
              'Subst'
              'sys'
              'Systeminfo'
              'Taskkill'
              'Tasklist'
              'Tcmsetup'
              'TCP/IP'
              'Telnet'
              'Tftp'
              'Time'
              'Title'
              'Tracerpt'
              'Tracert'
              'Tree'
              'Type'
              'Typeperf'
              'Unlodctr'
              'Verify'
              'Vol'
              'Vssadmin'
              'VVer'
              'W32tm'
              'Winnt'
              'Winnt32'
              'WMIC'
              'Xcopy')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'std commands'
        Enabled = False
        StyleName = 'Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'cd'
              'copy'
              'del'
              'md'
              'sys')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'rem MS-DOS batch file'
      'rem'
      '@echo off'
      'cls'
      'echo The command line is: %1 %2 %3 %4 %5'
      'rem'
      'rem now wait for the user ...'
      'pause'
      'copy c:\*.pas d:\'
      'if errorlevel 1 echo | Error in copy action!')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    Extentions = 'bat cmd'
    LexerName = 'Batch files'
    SkipSpaces = False
    LineComment = 'rem '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden, ffFontName, ffFontSize, ffFontCharset, ffVertAlign]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'HEX'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '\S+:{0,1}\s*$'#13#10
        ColumnFrom = 1
        ColumnTo = 1
      end
      item
        DisplayName = 'Hex'
        StyleName = 'HEX'
        TokenType = 7
        Expression = '[\da-f]+h \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Ident'
        TokenType = 2
        Expression = '[a-z_%]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '#define'
              '#include'
              '__configah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'si'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Reserved words'
        StyleName = 'reserved words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ''
              'ADC'
              'ADD'
              'ADDCF'
              'ADDDCF'
              'ADDFSR'
              'ADDLW'
              'ADDWCF'
              'ADDWF'
              'ADIW'
              'AND'
              'ANDI'
              'ANDLW'
              'ANDWF'
              'ASR'
              'ASRF'
              'B'
              'bankisel'
              'banksel'
              'BC'
              'BCF'
              'BCLR'
              'BDC'
              'BLD'
              'BNC'
              'BNDC'
              'BNZ'
              'BRA'
              'BRBC'
              'BRBS'
              'BRCC'
              'BRCS'
              'BREQ'
              'BRGE'
              'BRHC'
              'BRHS'
              'BRID'
              'BRIE'
              'BRLO'
              'BRLT'
              'BRMI'
              'BRNE'
              'BRPL'
              'BRSH'
              'BRTC'
              'BRTS'
              'BRVC'
              'BRVS'
              'BRW'
              'BSET'
              'BSF'
              'BST'
              'BTFSC'
              'BTFSS'
              'BZ'
              'CALL'
              'CBI'
              'CBR'
              'CLC'
              'CLH'
              'CLI'
              'CLN'
              'CLR'
              'CLRC'
              'CLRDC'
              'CLRF'
              'CLRW'
              'CLRWDT'
              'CLRZ'
              'CLS'
              'CLT'
              'CLV'
              'CLZ'
              'code'
              'COM'
              'COMF'
              'CP'
              'CPC'
              'CPI'
              'CPSE'
              'DA'
              'DB'
              'DE'
              'DEC'
              'DECF'
              'DECFSZ'
              'DT'
              'DW'
              'END'
              'EOR'
              'EQU'
              'errorlevel'
              'extern'
              'global'
              'GOTO'
              'ICALL'
              'IJMP'
              'IN'
              'INC'
              'INCF'
              'INCFSZ'
              'IORLW'
              'IORWF'
              'JMP'
              'LD'
              'LDD'
              'LDI'
              'LDS'
              'list'
              'LPM'
              'LSL'
              'LSLF'
              'LSR'
              'LSRF'
              'MOV'
              'MOVF'
              'MOVFW'
              'MOVIW'
              'MOVLB'
              'MOVLP'
              'MOVLW'
              'MOVWF'
              'MOVWI'
              'MUL'
              'NEG'
              'NEGF'
              'NOP'
              'OR'
              'ORG'
              'ORI'
              'OUT'
              'pagesel'
              'POP'
              'PUSH'
              'RCALL'
              'RES'
              'RESET'
              'RET'
              'RETFIE'
              'RETI'
              'RETLW'
              'RETURN'
              'RJMP'
              'RLF'
              'ROL'
              'ROR'
              'RRF'
              'SBC'
              'SBCI'
              'SBI'
              'SBIC'
              'SBIS'
              'SBIW'
              'SBR'
              'SBRC'
              'SBRS'
              'SEC'
              'SEI'
              'SEN'
              'SER'
              'SES'
              'SET'
              'SETC'
              'SETDC'
              'SETZ'
              'SEV'
              'SEZ'
              'SHE'
              'SKPC'
              'SKPDC'
              'SKPNC'
              'SKPNDC'
              'SKPNZ'
              'SKPZ'
              'SLEEP'
              'ST'
              'STD'
              'STS'
              'SUB'
              'SUBCF'
              'SUBDCF'
              'SUBI'
              'SUBLW'
              'SUBWF'
              'SWAP'
              'SWAPF'
              'TST'
              'TSTF'
              'WDR'
              'XORLW'
              'XORWF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg'
        ConditionList = <
          item
            TagList.Strings = (
              'segment')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'seg end'
        NameFmt = 'segment %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ends')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Label'
        ConditionList = <
          item
            TagList.Strings = (
              '\S+:{0,1}\s*$')
            CondType = tcMask
            TokenTypes = 1
          end>
        Highlight = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '%sz0'
        SelfClose = True
        TreeItemImage = 7
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      '  CODE'#9'SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39'Hello World'#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      '    RET'
      '    '
      'test1 PROC NEAR'
      '      MOV ax,10'
      '      CALL test2'
      '      RET'
      'test1 ENDP'
      ''
      'test2 PROC FAR'
      '      ADD ax,ax'
      '      RET'
      'test2 ENDP'
      ''
      '  CODE'#9'ENDS'
      '  '
      'PUSHALL MACRO'
      '       PUSH AX BX CX DX'
      '       PUSH DS SI'
      '       PUSH ES DI'
      #9'ENDM'
      '    '
      '; nasm macro taking 1 par'
      '%MACRO DOSB 1'
      '           mov ah, %1'
      '           int 21h'
      '%ENDMACRO    '
      '  '
      'END')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'asm'
    LexerName = 'Assembler'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com'
      '+ macros/procs/segments in tree (for MASM/NASM)')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
end
