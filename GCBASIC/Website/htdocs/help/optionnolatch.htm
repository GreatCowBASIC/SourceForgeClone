<html><head>
   <title>#option NoLatch</title>
   <meta name="generator"  content="HelpMaker.net" >
   <meta name="keywords"  content="," ></head>
<body bgcolor="FFFCEA" >
<table width="100%"  border="0"  cellspacing="0"  cellpadding="2"  bgcolor="C0C0C0" >
  <tr>
    <td align="left" >
      <div align="left" ><font face="Arial"  color="#010101"  size="4" ><span style="font-size:14pt" >#option nolatch</span></font><font color="#010101" ></font></div>

    </td>
    <td align="right" >
      <font face="Arial"  size="2" >
        <a href="option.htm">Previous</a>&nbsp;&nbsp;<a href="assembleroverview.htm">Next</a>
      </font>
    </td>
  </tr></table>
<hr><div align="left" ><font face="Arial" ><span style="font-size:12pt" ><b>Usage</b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >#option nolatch</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >This option disable PORTx to LATx redirection.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ><br></font></div><font color="#010101" ><div align="left" ><br></font></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b>Introduction</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >The GCBasic compiler will&nbsp; redirect all I/O pin writes from PORTx to 
LATx registers on PIC 16F1/18F Microchip microcomputers.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font color="#010101" ></font></div><p style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >The Microchip mid-range PIC microcontrollers use a sequence known 
as <b>Read-Modify-Write</b> (RMW) when changing an output state (1 or 0) 
on a pin. This can cause unexpected behavior under certain 
circumstances. </span></font><font color="#010101" ></font><br><p style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >When your program changes the state on a specific pin, for example 
RB0 in PORTB, the PIC microcontroller first <b>READs</b> all 8 bits of the 
PORTB register which represents the states of all 8 pins in PORTB 
(RB7-RB0).&nbsp;&nbsp; The PIC microcontroller then stores this data in the MCU. 
The bit associated with RB that you've commanded to <b>MODIFY</b> is 
changed, and then the PIC microcontroller <b>WRITEs</b> all 8 bits (RB7-
RB0) back to the PORTB register. </span></font><font color="#010101" ></font><br><p style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >During the first reading of the PORT register, you will be reading the 
actual state of the physical pin.&nbsp; The problem arises when an output 
pin is loaded in such a way that its logic state is affected by the load. 
Instances of such loads are LEDs without current-limiting resistors or 
loads with high capacitance or inductance.</span></font><font color="#010101" ></font><br><p style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >For example, if a capacitor is attached between pin and ground, it will 
take a short while to charge when the pin is set to 1.&nbsp;&nbsp; On the other 
hand, if the capacitor is discharged, it acts like a short circuit, forcing 
the pin to '0' state, and, therefore, a read of the PORT register will 
return 0, even though we wrote a 1 to it. </span></font><font color="#010101" ></font><br><p style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >GCBasic resolves this issue using the LATx register when writing to 
ports, rather than using PORTx registers.&nbsp;&nbsp;&nbsp; Writing to a LATx register 
is equivalent to writing to a PORTx register, but readings from LATx 
registers return the data value held in the port latch, regardless of the 
state of the actual pin. So, for reading use PORTx.</span></font><font color="#010101" ></font><br><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >This redirection capability from PORTx to LATx is available from 
version 0.94 of GCBasic compiler.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b>Note</b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >Use you can use the<b> #option nolatch</b> if problems occur with compiler 
redirection.</span></font><font color="#010101" ></font></div>

</html>
