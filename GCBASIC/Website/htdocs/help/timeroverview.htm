<html><head>
   <title>Timer Overview</title>
   <meta name="generator"  content="HelpMaker.net" >
   <meta name="keywords"  content="Sound Overview," ></head>
<body bgcolor="FFFCEA" >
<table width="100%"  border="0"  cellspacing="0"  cellpadding="2"  bgcolor="C0C0C0" >
  <tr>
    <td align="left" >
      <div align="left" ><font face="Arial"  size="4" ><span style="font-size:14pt" >Timer Overview</span></font><font color="#010101" ></font></div>

    </td>
    <td align="right" >
      <font face="Arial"  size="2" >
        <a href="tone.htm">Previous</a>&nbsp;&nbsp;<a href="cleartimer.htm">Next</a>
      </font>
    </td>
  </tr></table>
<hr><font face="Arial" ><span style="font-size:12pt" >Microcontrollers have one or more precision timing systems known as 
Timers. Timers can be used to perform a variety of time precision functions, 
such as generating events at specific times, measuring the duration of an 
event, keeping date and time record, counting events, etc. </span></font><font color="#010101" ></font><br><font color="#010101" ></font><br><div align="left" ><font face="Arial" ><span style="font-size:12pt" >The main component of a timer module is a free running binary counter that 
increments for each incoming pulse.&nbsp; Since it runs independently, it can count 
pulses concurrently with the main program execution.&nbsp; For instance a 
PIC16F688 microcontroller has two built-in hardware timer modules: Timer0 
and Timer1 and a MEGA328p has three timers Timer0, Timer1 and Timer 2.&nbsp; </span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" >The main component of Timers is a free running binary counter. The counter 
increments for each incoming timing pulse. The counter counts continuously 
from 0 to 2n-1, where n is the number of bits in the counter.&nbsp; Since the Timers 
runs independently, it can count inputs or clock pulses concurrently while the 
microcontroller is executing the main program.&nbsp; The microcontroller clock 
source can be selected as the clock input for Timer counter module.&nbsp; In such 
a case, the timing system is known to be working as a timer because it is 
driven by a fixed known frequency clock. However, the input clock to the 
timing system can also be provided through an external I/O pin of the 
microcontroller in which case it is known to be External clock and therefore 
will count the external pulses which may appear at regular or random 
intervals as defined by the clock source.&nbsp; </span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >Many methods are provided within Great Cow Basic to setup, initialise and 
read the current timer value. They are:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>ClearTimer</b>&nbsp;&nbsp;&nbsp;&nbsp;: Clear a timer</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>InitTimer</b><b><i>N</i></b>&nbsp;&nbsp;&nbsp;&nbsp;: Initialise a timer</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>SetTimer</b>&nbsp;&nbsp;&nbsp;&nbsp;: Set a timer to a value</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>StartTimer</b>&nbsp;&nbsp;&nbsp;&nbsp;: Start a timer</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>StopTimer</b>&nbsp;&nbsp;&nbsp;&nbsp;: Stop a timer</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>Timer</b><b><i>N</i></b>&nbsp;&nbsp;&nbsp;&nbsp;: Read a timer</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font color="#010101" ></font></div><div align="left" ><font face="Arial"  color="#010101" ><span style="font-size:12pt" >The following timers are supported: Timer0, Timer1, Timer2, Timer3, Timer4, </span></font><font face="Arial" ><span style="font-size:12pt" >Timer6, Timer7, </span></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >Timer8, Timer10 and Timer12</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >Not all of these functions are available on all microprocessors. For example, 
if a microprocessor only has 3 timers, then only Timer0, Timer1 and Timer2 
will be available. Timer0 and Timer2 return byte values, while Timer1, 
Timer3, Timer4,Timer5, Timer6,&nbsp;</span></font><font face="Arial" ><span style="font-size:12pt" > Timer7, </span></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >Timer8, Timer10 and Timer12 will 
return words.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial"  color="#010101" ><span style="font-size:12pt" >Please refer to the datasheet for your microcontroller to determine the 
number and size of the timers available.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ><br></font></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b>Notes for AVR Timer 0</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >On a Microchip Timer0 is a free running timer on midrange and</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >baseline microprocessors.&nbsp; On these chips Timer0 always runs</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >and cannot be stopped.&nbsp;&nbsp; However on most 18Fxxx microprocessors,</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >timer0 can be started or stopped via the T0CON.7 Bit.&nbsp; Therefore, on 
these chips timer0 MUST be started with the following command:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" ><b>StartTimer 0</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >On Many 18F microprocessors timer0 can be either an 8-Bit or 16-Bit</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >timer.&nbsp; On these chips this is determined by TC0CON.6 (T08BIT). The 
timer defaults to 8-bit. To set the timer to 16-Bit mode the GCB source 
code must include the&nbsp; following line.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" ><b>#define TMR0_16BIT</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >As an example using 16 bit mode with the 1:256 prescaler allows for 
very long timer periods ( &gt; 8 sec @ 8Mhz).</span></font><font color="#010101" ></font></div>

</html>
