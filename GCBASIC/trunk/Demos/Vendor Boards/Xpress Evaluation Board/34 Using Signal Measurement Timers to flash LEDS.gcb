'''
''' This demonstration shows the SMT timer in operation
'''
''' Microchip PIC Microcontrollers have either 1 or 2 Signal Measurement Timers (SMT).
''' The SMT's can be used as regular 24-bit timers.
'''
''' The following PIC MIcrocontroller are supported at the time of this program. (Includes "LF" variations)
'''
''' 12f1612, 16f1613, 16f1614, 16f1615, 16f1618, 16f1619
''' 16f18854, 16f18855, 16f18856, 16f18857, 16f18875, 16f18876, 16f18877
''' 18f65k40, 18f66k40, 18f67k40
'''
''' A 24-bit timer allow for very long timer periods/high resolution and can be quite useful for certain applications.  These timers support multiple clock sources and prescales.  Interrupt on overflow/match is also supported.
'''
''' These timers will "overflow" when the 24-bit timer value "matches"  the 24-bit period registers. The timer period can be precisely adjusted/set by writing a period value to the repective period register for eact timer.
'''
''' The maximum period is achieved by a period register value of 16,777,215.
''' This is the default value at POR. The timer period is also affected by the ChipMhz, TimerSource and Timer Prescale.

'''  The library (SMT_Timers.h)  that supports "normal" timer operation of SMT1/SMT2.  It does not support the advanced signal measurement features.
'''
''' Available commands are:
'''
'''
'''
''' InitSMT1 (Source,Prescale)
''' InitSMT2 (Source,Prescale)
'''
'''   Source can be one of the below:

'''       SMT_AT1_perclk      6
'''       SMT_MFINTOSC        5         (500KHz)
'''       SMT_MFINTOSC_16     4         (500Khz / 16)
'''       SMT_LFINTOSC        3         (32Khz)
'''       SMT_HFINTOSC        2
'''       SMT_FOSC4           1         (FOSC/4)
'''       SMT_FOSC            0
'''
'''   Prescale can be one of the following:
'''     SMTPres_1      1:1
'''     SMTPres_2      1:2
'''     SMTPres_4      1:4
'''     SMTPres_8      1:8

''' Example:   InitSMT1(SMT_FOSC4,SMTPres_2)
'''
''' SETSMT1PERIOD (Timervalue)
''' SETSMT2PERIOD (Timervalue)
'''
''' StartSMT1    'Starts SMT1
''' StartSMT2    'Starts SMT2
'''
''' StopSMT1      'Stops SMT1   '
''' StopSMT1      'Stops SMT1
'''
''' SetSMT1 (Timervalue)
''' SetSMT2 (TimerValue)
'''
''' ClearSMT1    'Clears SMT1 to 0
''' ClearSMT2    'Clears SMT2 to 0
'''
'''
'''
'''
'''@author     William Roth
'''@licence    GPL
'''@version    1.00
'''@date       09.6.2017
'''


' ----- Configuration

  #Chip 16F18855, 32

  #option explicit
  #Include <SMT_Timers.h>
  #config CLKOUTEN_ON


    '' -------------------LATA-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D1 |-
    ''-----------------------------------------
    ''
    #define LEDD2 PORTA.0
    #define LEDD3 PORTA.1
    #define LEDD4 PORTA.2
    #define LEDD5 PORTA.3
    #define Potentiometer   PORTA.4

    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT
    DIR     Potentiometer In


   SETSMT1PERIOD ( 4045000 )        ' 1.000s periodwith the parameters of SMT_FOSC and SMTPres_1 within the clock variance of the interclock
                                    ' a perfect internal clock would be 4000000

   SETSMT2PERIOD ( 9322401 )        ' 4.600s period with the parameters of SMT_FOSC4 and SMTPres_8

   InitSMT1(SMT_FOSC,SMTPres_1)
   InitSMT2(SMT_FOSC4,SMTPres_8)


   On Interrupt SMT1Overflow Call BlinkLEDD2
   On interrupt SMT2Overflow Call BlinkLEDD3

   StartSMT1
   StartSMT2


   Do
     '// Waiting for interrupts

   LOOP


  Sub BlinkLEDD2
    LEDD2 = !LEDD2
  End SUB



  Sub BlinkLEDD3
    LEDD3 = !LEDD3
  End SUB
