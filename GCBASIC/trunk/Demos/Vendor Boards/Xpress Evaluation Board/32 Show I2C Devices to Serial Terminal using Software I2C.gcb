'''
'''******************************************************************
'''
'''  Note: This is software I2C therefore, NO PPS for MSSP/I2C should be used
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Date: 13.3.2016
'''


' ----- Configuration
    'Chip Settings.
     #chip 16f18855,32
     #option explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.2
    'PinManager data: 09/02/2017
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS
        UNLOCKPPS

            'Module: EUSART
            RC0PPS = 0x0010    'TX > RC0
            TXPPS = 0x0008    'RC0 > TX (bi-directional)

        LOCKPPS
    End Sub
    'Template comment at the end of the config file


    ; ----- Define Hardware configuration for software I2C
    ' Define I2C settings - CHANGE PORTS
     #define I2C_MODE Master
     #define I2C_DATA PORTC.3
     #define I2C_CLOCK PORTC.4
     #define I2C_DISABLE_INTERRUPTS ON

    ' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
    ' USART settings - CHANGE PORTS if required
    #define USART_BAUD_RATE 19200
    Dir PORTc.6 Out
    Dir PORTc.7 In
    #define USART_TX_BLOCKING
    wait 500 ms

    ;----- Variables
    Dim DISPLAYNEWLINE as Byte

    #define SWITCH_DOWN         0
    #define SWITCH_UP           1

    #define SWITCH      PORTA.5

    dim DeviceID as byte


    ; ----- Main body of program commences here.
           ' Now assumes Serial Terminal is operational

  Do forever

    HSerPrintCRLF
    HSerPrint "Software I2C "
    HSerPrintCRLF 2

    HSerPrint "     "
    for DeviceID = 0 to 15
      HSerPrint hex(deviceID)
      HSerPrint " "
    next
    for DeviceID = 0 to 255
      DisplayNewLine = DeviceID % 16
      if DisplayNewLine = 0 Then
        HSerPrintCRLF
        HserPrint hex(DeviceID)
        HSerPrint ": "
      end if
      HSerPrint " "
      I2CStart
      I2CSend ( deviceID )

      if I2CSendState = True  then
        HSerPrint   hex(deviceID)
      else
        HSerPrint "--"
      end if

      I2CSend ( 0 )
      I2CSend ( 0 )
      i2cstop


    Next
    HSerPrintCRLF 2
    HSerPrint   "End of Search"
    HSerPrintCRLF 2
    wait 1 s
    wait while switch = On

  Loop
END
