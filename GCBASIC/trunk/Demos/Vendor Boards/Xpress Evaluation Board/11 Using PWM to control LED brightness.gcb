'''
'''******************************************************************
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change. A larger number of
''' steps applied, which lengthens the pulse width, also supplies more power to the load.
''' Lowering the number of steps applied, which shortens the pulse width, supplies less
''' power. The PWM period is defined as the duration of one complete cycle or the total
''' amount of on and off time combined.
'''
''' The demo vary the PWM to all the LEDS. This is achieved by redirected PMW6 to the LEDS.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Xpress Evaluation Board
'''  Date: 13.3.2016
'''

  #chip 16f18855,32
  #Config FEXTOSC_OFF, RSTOSC_HFINT32
  #Config WRT_OFF, CPD_ON, MCLRE_ON

  'Set the PPS of the PWM and the RS232 ports.
  'Set the PPS for this solution.
  #startup InitPPS, 85

  Sub InitPPS
    UNLOCKPPS
      RA3PPS = 0x000E;   'RA3->PWM6:PWM6OUT;
      RA1PPS = 0x000E;   'RA1->PWM6:PWM6OUT;
      RA2PPS = 0x000E;   'RA2->PWM6:PWM6OUT;
      RA0PPS = 0x000E;   'RA0->PWM6:PWM6OUT;
    LOCKPPS
  End sub

  '' -------------------LATA-----------------
  '' Bit#:  -7---6---5---4---3---2---1---0---
  '' LED:   ---------------|D5 |D4 |D3 |D1 |-
  ''-----------------------------------------
  ''
  #define LEDD2 PORTA.0
  #define LEDD3 PORTA.1
  #define LEDD4 PORTA.2
  #define LEDD5 PORTA.3


  Dir     LEDD2 OUT
  Dir     LEDD3 OUT
  Dir     LEDD4 OUT
  Dir     LEDD5 OUT


  'Optimise commands  for PWM modules to reduce the size of the code produced.
  #define USE_HPWMCCP1 FALSE      ' not used Optimise
  #define USE_HPWMCCP2 FALSE      ' not used Optimise
  #define USE_HPWMCCP3 FALSE      ' not used Optimise
  #define USE_HPWMCCP4 FALSE      ' not used Optimise

  #define USE_HPWM6 TRUE          ' used so compile
  #define USE_HPWM7 FALSE         ' not used Optimise

  #define USE_HPWM_TIMER2 TRUE    ' used so compile
  #define USE_HPWM_TIMER4 FALSE   ' not used Optimise
  #define USE_HPWM_TIMER6 FALSE   ' not used Optimise

  #define myFrequency 60
  #define myTimerSelected 2
  dim myDuty as byte
      myDuty = 50 'start at 50%

  HPWM ( HPWM6, myFrequency, myDuty , myTimerSelected  )

  Do Forever
        for myDuty = 0 to 100
            wait 10 ms
            HPWM ( HPWM6, myFrequency, myDuty, myTimerSelected  )
      next
      wait 10 ms
  Loop
