'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In the PIC18, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to Lesson 3, at a rate of ~.5 seconds.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Xpress Evaluation Board
'''  Date: 13.3.2016
'''


    'Chip Settings.
    #chip 16f18855, 32
    #Config FEXTOSC_OFF, RSTOSC_HFINT32
    #Config WRT_OFF, CPD_ON, MCLRE_ON

    '' -------------------LATA-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D1 |-
    ''-----------------------------------------
    ''
      'Set the PPS of the PWM and the RS232 ports.

    #define LEDD2	PORTA.0
    #define LEDD3	PORTA.1
    #define LEDD4	PORTA.2
    #define LEDD5	PORTA.3
    Dir 		LEDD2 OUT
    Dir 		LEDD3 OUT
    Dir 		LEDD4 OUT
    Dir 		LEDD5 OUT

'		Set the port as an ouput
    dir porta out
'		Set the first LED on
    Set LEDD5 on


'		Initialise the timer.
'		Firstly tell the compiler to use a 16bit timer for this demonstration
		#define TMR0_16BIT

'     For this timer we need the following:
'    		Prescaler
'        		1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'        		1:2
		InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2

'   Set the type of event
		On Interrupt Timer0Overflow call blink

    'Event every 1 sec
		Settimer ( 0 , 0xe796  )

'     Start the Timer
		StartTimer 0

		Do Forever
           wait 1 ms
    Loop


    Sub blink
						'wait for the event... was it the event we are looking for?
            if TMR0IF = 1 then

                ' Clearing Timer flag will reset event
                TMR0IF = 0
                Set C off
                Rotate porta right
                if C = 1 then porta.3 = 1

                'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
                 Settimer ( 0 , 0x0bdc )

						end if
    End Sub
