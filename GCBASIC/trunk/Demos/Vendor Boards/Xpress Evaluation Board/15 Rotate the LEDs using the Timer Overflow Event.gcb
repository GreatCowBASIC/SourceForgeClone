'''
'''******************************************************************
'''
'''  Timer0 is a counter implemented in the processor. It may be used to count instruction
'''  cycles or external events, that occur at or below the instruction cycle rate.
'''  In thE pic, Timer0 can be used as either an 8-bit or 16-bit counter, or timer. The
'''  enhanced mid-range core implements only an 8-bit counter.
'''  This lesson configures Timer0 to count instruction cycles and to set a flag when it rolls
'''  over. This frees up the processor to do meaningful work rather than wasting instruction
'''  cycles in a timing loop.
'''  Using a counter provides a convenient method of measuring time or delay loops as it
'''  allows the processor to work on other tasks rather than counting instruction cycles.
'''
'''
'''  LEDs rotate from right to left, similar to Lesson 3, at a rate of ~.5 seconds.
'''
'''
'''  PIC: 16F18855
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Xpress Evaluation Board
'''  Date: 13.3.2016
'''


    'Chip Settings.
    #chip 16f18855, 32
    #option explicit
    #Config FEXTOSC_OFF, RSTOSC_HFINT32
    #Config WRT_OFF, CPD_ON, MCLRE_ON


    'Set the PPS of the PWM
    'Set the PPS for this solution.
  #startup InitPPS, 85

  Sub InitPPS
    UNLOCKPPS

    'Set the PPS of the RS232 ports.
      RC0PPS = 0x0010     'RC0->EUSART:TX;
      RXPPS  = 0x0011     'RC1->EUSART:RX;

      RB0PPS = 0x18;   //RB0->TMR0:TMR0;
      LOCKPPS
  End sub

    '-------------------LATA-----------------
    'Bit#:  -7---6---5---4---3---2---1---0---
    'LED:   ---------------|D5 |D4 |D3 |D2 |-
    ''-----------------------------------------
    ''

    Dim TIMEOUT as Byte

; ----- Constants
    #define USART_BAUD_RATE 115200
    #define USART_TX_BLOCKING
'


    #define LEDD2 PORTA.0
    #define LEDD3 PORTA.1
    #define LEDD4 PORTA.2
    #define LEDD5 PORTA.3
    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT

'   Set portb.0 as out
    dir portb.0 out
'   Set the port as an ouput
    dir porta out
'   Set the first LED on
    Set LEDD5 on


'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
    #define TMR0_16BIT

'     For this timer we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
    InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2   'Event will be raised every 1.04s
'   Set the type of event
    On Interrupt Timer0Overflow call blink
    SetTimer ( 0, 0x0bdc )
'     Start the Timer - you need to start this Timer0!
    StartTimer 0

    Do Forever

          if TimeOut = 1 then

           ' Rotate our LEDs
            Set C off
            Rotate porta right
            if C = 1 then porta.3 = 1

            TimeOut= 0
            SetTimer ( 0, 0x0bdc ) ' Set timer to 1 second`

          end if




    Loop


    Sub blink
          TimeOut = 1
          'Clear the Timer0 overflow event
          TMR0IF = 0
    End Sub
