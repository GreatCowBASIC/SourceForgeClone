'  FILE:    PIC_GCB_16f1939_Temp_Demo_with_GLCD_Example.gcb
'  DATE:    07/08/14
'  VERSION: 0.1a
'  AUTHOR:  Anobium
'
'This program was written using the Great Cow Basic IDE for use with the PIC
'16F8777A development board (HCDVBD0003) and a GLCD module
'to display the value of the a DS18B20 sensor.


'Chip Settings. Assumes the development board with with a 16F877A
#chip 16F1939,32
#option explicit
#config Osc = INT, VCAPEN_OFF, MCLRE_On, PLLEN_ON, CLKOUTEN_OFF

#include <DS18B20.h>
#include <GLCD.h>


#define GLCD_TYPE GLCD_TYPE_ST7920
#define GLCD_IO 8
#define GLCD_WIDTH 128
#define GLCD_HEIGHT 64

' read delay of 25 is required at 32mhz, this can be reduced to 0 for slower clock speeds
#define ST7920ReadDelay 25
' write delay of 2 is required at 32mhz.  this can be reduced to 1 for slower clock speeds
#define ST7920WriteDelay 2


#define GLCD_RS PORTE.0
#define GLCD_Enable PORTE.2
#define GLCD_RW PORTE.1
#define GLCD_RESET PORTA.0
#define GLCD_DATA_PORT PORTD

#define _GLCD_RS PORTE.0
#define _GLCD_Enable PORTE.2
#define _GLCD_RW PORTE.1
#define _GLCD_RESET PORTA.0
#define _GLCD_DATA_PORT PORTD

Dim POSX, CCOUNT, SIGNBIT, WHOLE, FRACT, DIG, MSG1LEN as Byte
dim msg1 as string * 16


GLCDCLS
GLCDPrint 0, 1, "Great Cow Basic "
wait 1 s




ST7920GLCDEnableGraphics
GLCDCLS

    GLCDCLS
'   GLCDEnableGraphicsST7920          ;clear screen - not required
     msg1 =  "ChipMhz@" + str(ChipMhz)
    posx = positionmsg1( msg1 )
    GLCDDrawString posx ,0 , msg1

    circle(10,10,10)            ;upper left
    circle(117,10,10)           ;upper right
    circle(63,31,10)            ;center
    circle(63,31,20)            ;center
    circle(10,53,10)            ;lower left
    circle(117,53,10)           ;lower right

      msg1 =  ChipNameStr
      posx = positionmsg1( msg1 )
    GLCDDrawString posx , 54 , msg1
    wait 1 s                  ;wait



  ' DS18B20 port settings - this is required
  #define DQ PortC.3

  dim TempC_100 as word   ' a variabler to handle the temperature calculations
  ccount = 0
  GLCDCLS          ;clear

Do
   ' The function readtemp returns the integer value of the sensor
   DSdata = readtemp

   ' Display the integer value of the sensor on the GLCD

   msg1 = hex(ccount)
   msg1 = msg1 + " Int :"
   msg1 = msg1 + str(DSdata)
   msg1 = msg1 + "C"
   GLCDDrawString 0,0, msg1


   ' Display the integer and decimal value of the sensor on the GLCD

   ' The function readtemp12 returns the raw value of the sensor.
   ' The sensor is read as a 12 bit value therefore each unit equates to 0.0625 of a degree
   DSdata = readtemp12
   SignBit = DSdata / 256 / 128
   If SignBit = 0 Then goto Positive
   ' its negative!
   DSdata = ( DSdata # 0xffff ) + 1 ' take twos comp

Positive:

   ' Convert value * 0.0625. Mulitple value by 6 then add result to multiplication of the value with 25 then divide result by 100.
   TempC_100 =  DSdata * 6
   DSdata = ( DSdata * 25 ) / 100
   TempC_100 = TempC_100 + DSdata

   Whole = TempC_100 / 100
   Fract = TempC_100 % 100

DisplayTemp:

   msg1 = hex(ccount)
   msg1 = msg1 + " Real:"
   If SignBit = 0 Then
      msg1 = msg1 + Str(Whole) + "."
   else
      msg1 = msg1 + "-"
      msg1 = msg1 + Str(Whole) + "."
   end if


  ' To ensure the decimal part is two digits
   Dig = Fract / 10
   msg1 = msg1 + str( Dig )
   Dig = Fract % 10
   msg1 = msg1 + str( Dig )
   msg1 = msg1 + "C"
   msg1 = msg1 + "  "
   GLCDDrawString 0,16, msg1

   wait 2 s
   ccount++

loop
function positionmsg1 ( in msg1 )
      msg1len = ( ( len(msg1)  ) * GLCDFontWidth ) /2
      positionmsg1 =  ( GLCD_Width / 2) - msg1len
end function
