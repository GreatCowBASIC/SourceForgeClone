''' A demonstration program for GCGB and GCB.
'''
'''******************************************************************
'''
''' This shows using a table lookup function to implement a
''' binary to gray code conversion.  The POT is read by the ADC,
''' The high order 4 bits are averged the displayed on the LEDs.

''' The ADC value is averaged in the sub soutine.
'''
''' This returns coded binary on the LEDs in accordance with the POT reading
'''
'''
'''   You need four LEDs connnect to portc.0, portc.1, portc.2 and portc.3 connected via suitable resistors.
'''  You will to connect a pot to porta.0.  The needs to be connected the supply voltage and 0v using an appropiate method.
'''  You will a switch connect to porta.1.  The needs to be connected the supply voltage via a 1-k pullup resistor.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16f18326
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.0
'''@date     29.07.2016



    'Chip Settings.
    #chip 16f18326
    #Config WRT_OFF, CPD_ON, MCLRE_ON, FEXTOSC_OFF, CLKOUTEN_OFF    'These configs = User non-votatile protection off (WRT), Data non-votatile protection off (CPD), MCLR pin function enablesd, External oscillator not enabled and clockout function is disables ( enable portc.5 to I/O port).


  '' -------------------LATC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D2 |-
    ''-----------------------------------------
    ''
    #define LEDD2  PORTC.0
    #define LEDD3  PORTC.1
    #define LEDD4  PORTC.2
    #define LEDD5  PORTC.3
    #define LEDBANK portc
    #define SWITCH      PORTA.1

    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT
    Dir      SWITCH IN

'    Set LEDS off
    LEDBANK = 0



    #define SWITCH_DOWN         1
    #define SWITCH_UP           0


    #define NUM_READINGS 8

    'Dimension and set the variables
    dim _sum as long
    dim yloop, xloop as byte
    _sum = 0

    dim queue(8)
    queue = 0, 0, 0, 0, 0, 0, 0, 0

    do
        for xloop = 1 to NUM_READINGS
            ' This will set the whole port
            LEDBANK = ( average_reading ( queue() ) * 10 / 138 )         ' a little calculation to ensure max value is 15, equates to all 4 LEDS on
            ' Set the next array point with the next reading
            queue( xloop ) = ReadAD ( AN0 )
        next
    loop


function average_reading ( in analyze_queue() ) as word

    _sum = 0
    for yloop = 1 to  NUM_READINGS
        _sum = [long]queue ( yloop ) + _sum
    next

    average_reading = _sum / NUM_READINGS

end Function

