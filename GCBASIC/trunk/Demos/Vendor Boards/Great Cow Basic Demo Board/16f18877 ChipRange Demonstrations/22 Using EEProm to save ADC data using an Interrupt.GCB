''' A demonstration program for GCGB and GCB.
'''
'''******************************************************************
'''
''' This demonstration will provide code for writing and reading a single byte onto
''' the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The EEPROM is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.
''' Writes and reads to the EEPROM are practically instant and are much faster
''' than program memory operations.

''' Press the switch to save the LED state and then disconnect the power. When
''' power is then applied again, the program will start with that same LED lit.

''' When the demonstration is first programmed, no LEDs will light up even with movement
''' of the POT. When the switch is pressed, the corresponding LED will be lit and
''' then the PIC will go to sleep until the switch is pressed again. Each press of
''' the switch saves the ADC value into EEPROM. The PIC uses interrupts to wake up
''' from sleep, take an ADC reading, save to EEPROM, and then goes back to sleep.
'''
'''
'''   You need four LEDs connnect to PORTD.0, PORTD.1, PORTD.2 and PORTD.3 connected via suitable resistors.
'''  You will to connect a pot to porta.0.  The needs to be connected the supply voltage and 0v using an appropiate method.
'''  You will a switch connect to porta.1.  The needs to be connected the supply voltage via a 1-k pullup resistor.
'''  ************************************************************************************************************************************************************************************
'''
'''
'''  PIC: 16f18877
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''
'''@author   EvanV
'''@licence  GPL
'''@version  1.1
'''@date     04.12.2016



    'Chip Settings.
    #chip 16f18877
    #option explicit
    #Config WRT_OFF, CPD_ON, MCLRE_ON, FEXTOSC_OFF, CLKOUTEN_OFF    'These configs = User non-votatile protection off (WRT), Data non-votatile protection off (CPD), MCLR pin function enablesd, External oscillator not enabled and clockout function is disables ( enable I/O port).


  'Set the RS232 ports.
  'Set the PPS for this solution.
  #startup InitPPS, 85

  Sub InitPPS
    UNLOCKPPS
      RXPPS  = 0x15 'Pin RC5 source is an input for RX
      RC4PPS = 0x10 'Pin RC4 source is TX/CK
    LOCKPPS
  End sub


  #define USART_BAUD_RATE 19200
  #define USART_TX_BLOCKING

   '' -------------------LATD-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   ---------------|D5 |D4 |D3 |D2 |-
    ''-----------------------------------------
    ''
    #define LEDD2  PORTD.0
    #define LEDD3  PORTD.1
    #define LEDD4  PORTD.2
    #define LEDD5  PORTD.3
    #define LEDBANK PORTD
    #define SWITCH      PORTA.1

    Dir     LEDD2 OUT
    Dir     LEDD3 OUT
    Dir     LEDD4 OUT
    Dir     LEDD5 OUT
    Dir     SWITCH IN

    ' Set LEDS off
    LEDBANK = 0

    ' A variable to track the button has been presssed
    dim switchstate as byte
    switchstate = 0

    Dim OUTVALUE, ADC_VALUE as Byte


    #define SWITCH_DOWN         1
    #define SWITCH_UP           0


    'Setup an Interrupt event when porta.1 goes negative.
    IOCAP1 = 1
    On Interrupt PORTChange  Call InterruptHandler

    do

      if switchstate.0 = 1 Then

         'Read the value from the EEPROM from register Zero in the EEPROM
          EPRead ( 0, OutValue )
          'Leave the Top Bytes alone and set the lower four bits
          LEDBANK = ( LEDBANK & 0XF0 ) OR ( OutValue / 16 )

          HSerPrint "ADC = " + str(adc_Value)
          HSerPrintCRLF

          Sleep

          switchstate.0 = 0                   '  remove flag

      end if

    loop


sub InterruptHandler

    LEDBANK = 255                               'Set all the LEDs on, the LEDs will flash when the switch is pressed

    if IOCAP1 = 1 and switch = On then         'S2 was just pressed AND switch is down
        IOCAP1 = 0                             'Prevent the event from reentering the InterruptHandler routine
        IOCAF1 = 0                             'We must clear the flag in software
        switchstate.0 = 1                      'set bit 0 of the variable to flag the switch has been operated
        HSerPrint "SW Pressed"
        HSerPrintCRLF
        'Read the ADC
        adc_value = readad ( AN0 )

        'Write the value to register Zero in the EEPROM
        EPWrite ( 0, adc_value )
        IOCAP1 = 1                               'ReEnable the InterruptHandler routine

    end if

end sub
