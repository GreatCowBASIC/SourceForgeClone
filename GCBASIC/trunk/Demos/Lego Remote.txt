;Generated by Great Cow Graphical BASIC

;Chip Settings

;Include files (Libraries)
#include <eracer.h>
#include <lego.h>

;Defines (Constants)
#define Beep Accessories.0
#define LED_G Accessories.1
#define LED_R Accessories.2
#define LED_T Accessories.3
#define R_Stop 0
#define R_Forward 1
#define R_Reverse 2
#define All_Off 255
#define BackTime 75
#define SpinTime 50

;Main Routine
'Includes
'Allows an eRacer robot to be controlled using a Lego Mindstorms remote
'Inter-layer communication
'Settings for programs
LET LINE = 50
LET LeftLine = 50
LET RightLine = 50
'Initialisation subs (Note: InitBot and InitLego called using #startup)
InitRemote
'Main Routine
Main:
Receive
Process
RunProgram
Act
goto Main

;Subroutines

sub InitRemote
 LET Accessories = 0
 LET LeftMotor = 0
 LET RightMotor = 0
 LET Program = 0
end sub

sub Receive
 'Initialise
 LET BadSignal = FALSE
 LET RemoteH = 0
 LET RemoteL = 0
 if RecALow then
  LET BadSignal = TRUE
  exit sub
 end if
 'Read Header
 SerReceive(1, LegoTemp)
 If LegoTemp = 0x55 then
  SerReceive (1, LegoTemp)
 end if
 if LegoTemp <> 0xff then
  LET BadSignal = TRUE
  exit sub
 end if
 SerReceive(1, LegoTemp)
 'Read Command
 SerReceive(1, LegoTemp)
 if LegoTemp <> 0xd2 then
  LET BadSignal = TRUE
  Wait 15 ms
  exit sub
 end if
 SerReceive(1, LegoTemp)
 'Read Button status
 SerReceive(1, ButtonL)
 SerReceive(1, LegoTemp)
 SerReceive(1, ButtonH)
 SerReceive(1, LegoTemp)
 'Read Checksum
 SerReceive(1, Checksum)
 SerReceive(1, LegoTemp)
 'Verify Checksum
 LET LegoTemp = 0xd2 + ButtonL + ButtonH
 if LegoTemp <> Checksum then
  LET BadSignal = TRUE
 end if
 'Remote sends each command 3 times, so wait for the other two sends to complete
 Wait 10 ms
end sub

sub Process
 if BadSignal = TRUE then
  exit sub
 end if
 LET LeftMotor = R_Stop
 LET RightMotor = R_Stop
 'Program selection buttons
 if ButtonH = 0 then
  if ButtonL = 0x02 then
   LET Program = 1
  end if
  if ButtonL = 0x04 then
   LET Program = 2
  end if
  if ButtonL = 0x08 then
   LET Program = 3
  end if
  if ButtonL = 0x10 then
   LET Program = 4
  end if
  if ButtonL = 0x20 then
   LET Program = 5
  end if
 end if
 if ButtonL.0 ON then
  LET RightMotor = R_Reverse
 end if
 if ButtonL = 0x40 then
  LET LeftMotor = R_Stop
  LET RightMotor = R_Stop
  LET Accessories = All_Off
  LET Program = 0
  exit sub
 end if
 if ButtonL = 0x80 then
  set beep on
  exit sub
 end if
 if ButtonH = 0x01 then
  set LED_G ON
  exit sub
 end if
 if ButtonH = 0x02 then
  set LED_R ON
  exit sub
 end if
 if ButtonH = 0x04 then
  set LED_T ON
  exit sub
 end if
 if ButtonH.3 ON then
  LET LeftMotor = R_Forward
 end if
 if ButtonH.5 ON then
  LET RightMotor = R_Forward
 end if
 if ButtonH.6 ON then
  LET LeftMotor = R_Reverse
 end if
end sub

sub RunProgram
 if Program = 0 then
  exit sub
 end if
 'Line follow program
 if Program = 1 then
  SET GREEN ON
  SET RED ON
  LET LTemp = ReadAD (Analog_LDR_Left)
  LET RTemp = ReadAD (Analog_LDR_Right)
  LET MotorDir = 0
  if LTemp > LeftLine then
   TurnLeft
   LET MotorDir = 1
  end if
  if RTemp > RightLine then
   TurnRight
   LET MotorDir = 2
  end if
  if MotorDir = 0 then
   Forward
  end if
  exit sub
 end if
 'Object avoidance program
 if Program = 2 then
  PWMOn
  Wait 3 10us
  Forward
  if IR_In on then
   PWMOff
   Wait 3 10us
   exit sub
  end if
  if IR_In off then
   PWMOff
   Reverse
   Wait BackTime 10ms
   SpinLeft
   Wait SpinTime 10ms
   Forward
  end if
 end if
 'Line follow recalibrate program
 if Program = 5 then
  LET Program = 0
  set green on
  set red on
  wait 1 ms
  'Check left
  set TL_LED on
  LET LeftLine = ReadAD(Analog_LDR_Left)
  wait 1 sec
  set TL_LED off
  'Check right
  set TR_LED on
  LET RightLine = ReadAD(Analog_LDR_Right)
  wait 1 sec
  set TR_LED off
  set green off
  set red off
 end if
end sub

sub Act
 'Turn all accessories off?
 if Accessories = All_Off then
  set green off
  set red off
  set TL_LED off
  set TR_LED off
  set buzzer off
  LET Accessories = 0
 end if
 'Toggle LEDs
 if LED_G on then
  Set LED_G off
  if green on then
   set green off
   goto GreenDone
  end if
  set green on
 end if
 GreenDone:
 if LED_R on then
  Set LED_R off
  if red on then
   set red off
   goto RedDone
  end if
  set red on
 end if
 RedDone:
 if LED_T on then
  Set LED_T off
  if TL_LED on then
   set TL_LED off
   set TR_LED off
   goto TopDone
  end if
  set TL_LED on
  set TR_LED on
 end if
 TopDone:
 'Buzzer
 if Beep on then
  set Beep off
  set buzzer on
  wait 10 10ms
  set buzzer off
 end if
 'Control Motors (Don't turn off if a program is running)
 if Program <> 0 then
  if LeftMotor = R_Stop then
   exit sub
  end if
  if RightMotor = R_Stop then
   exit sub
  end if
 end if
 if LeftMotor = R_Stop then
  set LF off
  set LR off
 end if
 if LeftMotor = R_Forward then
  set LF on
  set LR off
 end if
 if LeftMotor = R_Reverse then
  set LF off
  set LR on
 end if
 if RightMotor = R_Stop then
  set RF off
  set RR off
 end if
 if RightMotor = R_Forward then
  set RF on
  set RR off
 end if
 if RightMotor = R_Reverse then
  set RF off
  set RR on
 end if
end sub

