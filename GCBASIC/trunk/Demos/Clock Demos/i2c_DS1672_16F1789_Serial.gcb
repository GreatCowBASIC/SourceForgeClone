;   FILE:    i2c_DS1672_16F1789_Serial.gcb
;   DATE:    29/01/15
;   VERSION: 1.0a
;   AUTHOR:  Anobium

;    Demo of a complete clock/calendar using the DS1337 RTC for a 16F1789 40 PIN Prototype board.
;    Install GCB - you are recommended to use GCB@SYN from the Great Cow Basic website.
;
;    This example code is compliant with the DS1672 datasheet.
;
;    The DS1672 incorporates a 32-bit counter and power-monitoring functions. The 32-bit counter
;    is designed to count seconds and can be used to derive time-of-day, week, month, month, and
;    year by using a software algorithm. A precision, temperature-compensated reference and
;    comparator circuit monitors the status of VCC. When an out-of-tolerance condition occurs, an
;    internal power-fail signal is generated that forces the reset to the active state. When VCC returns to
;    an in-tolerance condition, the reset signal is kept in the active state for a period of time to allow
;    the power supply and processor to stabilize.
;
;
;    This code is free software; you can redistribute it and/or
;    modify it under the terms of the GNU Lesser General Public
;    License as published by the Free Software Foundation; either
;    version 2.1 of the License, or (at your option) any later version.

;    This code is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;    Lesser General Public License for more details.

;    If you require a copy of the GNU Lesser General Public
;    License along with this code; please write to the Free Software
;    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


;    Based on the Thomas Henry works of 5/26/2014
;    Evan R Venn/Anobium  ---  27/1/15 Initial release for DS1672

;    This demonstration simple shows the values of the clock on the display

;----- Configuration

 #chip 16F1789, 32
 #config Osc = intOSC, MCLRE_ON, PLLEN_ON, VCAPEN_OFF

 #include <DS1672.h>
 #include <LCD2SerialRedirect.h>


; Define Hardware I2C settings for SSP module
'        #define HI2C_BAUD_RATE 400
'        #define HI2C_DATA PORTC.4
'        #define HI2C_CLOCK PORTC.3
'        ;I2C pins need to be input for SSP module
'        Dir HI2C_DATA in
'        Dir HI2C_CLOCK in
'       ;MASTER I2C Device for SSP module
'        HI2CMode Master


;       Define I2C settings - CHANGE PORTS
       #define I2C_MODE Master
       #define I2C_DATA PORTC.4
       #define I2C_CLOCK PORTC.3
       #define I2C_DISABLE_INTERRUPTS ON
    ;   #define I2C_BIT_DELAY   20 us      width of data bit on SDA
    ;   #define I2C_CLOCK_DELAY 10 us      width of clock pulse on SCL

 ' THIS CONFIG OF THE SERIAL PORT WORKS WITH max232 THEN TO PC
 ' USART settings
         #define USART_BAUD_RATE 9600
         Dir PORTc.6 Out
         Dir PORTc.7 In
         #define USART_DELAY 10 ms
         #define USART_BLOCKING
         wait 500 ms
         HSerSend 7


;----- Variables

dim sec as LONG
dim oldsec as long


;----- Program
  CLS

  #ifdef HI2C_DATA
        Locate 0, 12
        Print "i2cHW"
        HI2CReStart                          ; is DS1672 present?
        HI2CSend(DS_AddrWrite)
        HI2CStop

        if HI2CAckPollState = True  then  ; is DS1672 present?
           Print "No DS1672"              ; user message
           locate 1,0
           Print "Stopped"                ; user message
           end
        end if
  #endif

  #ifdef I2C_DATA
        Locate 0, 12
        Print "i2cSW"
        I2CStart                          ; is DS1672 present?
        I2CSend(DS_AddrWrite)
        I2CStop

        if I2CSendState = False  then     ; is DS1672 present?
           Print "No DS1672"              ; user message
           locate 1,0
           Print "Stopped"                ; user message
           end
        end if
   #endif

  locate 0,0
  Print "DS1672"
  locate 1,0
  Print "Great Cow Basic"
  wait 2 s
  CLS

  ;	Quick Command Reference:

          ;DS1672_EnableOscillator(flag [true|false])

          ;DS1672_ResetClock
          ;DS1672_SetClock( value as long )
          ;DS1672_ReadClock( value as long )

          ;DS1672_SetControl(value as byte)
          ;DS1672_ReadControl. A function return currrent value
          ;DS1672_SetControlStatus(value as byte)
          ;DS1672_ReadControlStatus. A function return currrent value

          ;DS1672_SetTrickleCharger(value as byte)
          ;DS1672_ReadTrickleCharger

          ;DS1672_ClearOscillatorStopFlag
          ;DS1672_OscillatorStopFlagStatus. A function returning a boolean

          ;DS1672_ReadRegister. A function
          ;DS1672_WriteRegister (value as byte)


  ; Note on Trickle Charge for VBAT.  See the datasheet for the specifics of this capability.

  ; The trickle charger is controlled by the trickle charge register. A simplified schematic in the datasheet
  ; shows the basic components of the trickle charger. The trickle charge select (TCS) bit (bits 4–7) controls
  ; the selection of the trickle charger.  In order to prevent accidental enabling, only a pattern on 1010 will
  ; enable the trickle charger. All other patterns will disable the trickle charger. The DS1672 powers up with
  ; the trickle charger disabled. The diode select (DS) bits (bits 2, 3) select whether or not a diode is
  ; connected between VCC and VBACKUP. If DS is 01, no diode is selected or if DS is 10, a diode is selected.
  ; The RS bits (bits 0, 1) select whether a resistor is connected between VCC and VBACKUP and what the value
  ; of the resistor is.  Warning: The resistor value of 250? must not be selected whenever VCC is greater than 3.63V


  ; Example uses of the DS1672 functions
  ;
  ; Example of setting the clock
  ; sec = 0x12345678 ; One days worth of secconds... :-)
  sec = 0
  DS1672_SetClock( sec )
  DS1672_ReadClock( sec  )   ;get seconds
  DS1672_EnableOscillator( true )           ;and, ensure the clock is running



; Main body of program commences here.
  DS1672_ReadClock( sec )   ;get initial date. This is required for main routine.

  ' initialise a tracking varaible
  powerloss = false

  ; display all registers in realtime display - you will need a big display!!
    DS1672_ClearOscillatorStopFlag
    oldsec = 0xffffffff
    do forever
      do
            DS1672_ReadClock( sec )
      loop while oldsec = sec
      oldsec = sec
      for xloop = 0X00 to 0X05
        locate xloop + 3, 0
        LCDHex( xloop, LeadingZeroActive )
        print "H "
        print ByteToBin( DS1672_ReadRegister ( xloop ) )
      next

      locate 0,0
      print "CLK "
      LCDHex( sec_E, LeadingZeroActive )
      LCDHex( sec_U, LeadingZeroActive )
      LCDHex( sec_H, LeadingZeroActive )
      LCDHex( sec,   LeadingZeroActive )


    loop

end
